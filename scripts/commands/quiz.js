const fs = require("fs");
const path = require("path");

const questions = JSON.parse(fs.readFileSync(path.join(__dirname, "../../data/questions.json")));

let quizSession = {}; // userId ржЕржирзБржпрж╛ржпрж╝рзА ржХрзБржЗржЬ рж╕рзЗрж╢ржи

module.exports.config = {
  name: "quiz",
  version: "1.0",
  author: "Naim",
  cooldowns: 5,
  role: 0,
  shortDescription: {
    en: "Start a quiz!"
  },
  longDescription: {
    en: "Start an interactive quiz with timer."
  },
  category: "fun",
  guide: {
    en: ".quiz"
  }
};

module.exports.run = async function({ api, event }) {
  const userId = event.senderID;
  const threadId = event.threadID;

  if (quizSession[userId]) {
    return api.sendMessage("тЭЧрждрзБржорж┐ ржЗрждрзЛржоржзрзНржпрзЗржЗ ржХрзБржЗржЬрзЗ ржЖржЫрзЛ! ржЙрждрзНрждрж░ ржжрж╛ржУ A/B/C/D ржжрж┐рзЯрзЗред", threadId);
  }

  quizSession[userId] = {
    current: 0,
    score: 0
  };

  sendQuestion(api, threadId, userId);
};

function sendQuestion(api, threadId, userId) {
  const session = quizSession[userId];
  const question = questions[session.current];

  if (!question) {
    api.sendMessage(`ЁЯОЙ ржХрзБржЗржЬ рж╢рзЗрж╖! ржЖржкржирж╛рж░ рж╕рзНржХрзЛрж░: ${session.score}/${questions.length}`, threadId);
    delete quizSession[userId];
    return;
  }

  let msg = `ЁЯУН ржкрзНрж░рж╢рзНржи ${session.current + 1}: ${question.question}\n\n`;
  for (const [key, val] of Object.entries(question.options)) {
    msg += `${key}. ${val}\n`;
  }
  msg += "\nтП│ рззрзж рж╕рзЗржХрзЗржирзНржбрзЗрж░ ржоржзрзНржпрзЗ ржЙрждрзНрждрж░ ржжрж┐ржи (A/B/C/D)";

  api.sendMessage(msg, threadId);

  session.timeout = setTimeout(() => {
    if (quizSession[userId]) {
      api.sendMessage("тП░ рж╕ржорзЯ рж╢рзЗрж╖! ржкрж░рзЗрж░ ржкрзНрж░рж╢рзНржирзЗ ржпрж╛ржЪрзНржЫрж┐...", threadId);
      session.current++;
      sendQuestion(api, threadId, userId);
    }
  }, 10000);
}

// тЬЕ ржЙрждрзНрждрж░ ржзрж░рж╛рж░ рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░
module.exports.handleReply = async function({ api, event }) {
  const userId = event.senderID;
  const threadId = event.threadID;
  const answer = event.body.trim().toUpperCase();

  if (!quizSession[userId]) return;

  const session = quizSession[userId];
  const currentIndex = session.current - 1;
  const correctAnswer = questions[currentIndex].answer;

  clearTimeout(session.timeout);

  if (answer === correctAnswer) {
    api.sendMessage("тЬЕ рж╕ржарж┐ржХ ржЙрждрзНрждрж░!", threadId);
    session.score++;
  } else {
    api.sendMessage(`тЭМ ржнрзБрж▓! рж╕ржарж┐ржХ ржЙрждрзНрждрж░: ${correctAnswer}`, threadId);
  }

  session.current++;
  sendQuestion(api, threadId, userId);
};
[
  {
    "question": "ржмрж╛ржВрж▓рж╛ржжрзЗрж╢рзЗрж░ ржЬрж╛рждрзАржпрж╝ ржлрзБрж▓ ржХрзА?",
    "options": {
      "A": "рж╢рж╛ржкрж▓рж╛",
      "B": "рж░ржЬржирзАржЧржирзНржзрж╛",
      "C": "ржЧрзЛрж▓рж╛ржк",
      "D": "рж╕рзВрж░рзНржпржорзБржЦрзА"
    },
    "answer": "A"
  },
  {
    "question": "ржмрж╛ржВрж▓рж╛ржжрзЗрж╢рзЗрж░ рж╕рзНржмрж╛ржзрзАржирждрж╛ ржжрж┐ржмрж╕ ржХрзЛржи рждрж╛рж░рж┐ржЦрзЗ?",
    "options": {
      "A": "рзирзз ржлрзЗржмрзНрж░рзБржпрж╝рж╛рж░рж┐",
      "B": "рзирзм ржорж╛рж░рзНржЪ",
      "C": "рззрзм ржбрж┐рж╕рзЗржорзНржмрж░",
      "D": "рзз ржЬрж╛ржирзБржпрж╝рж╛рж░рж┐"
    },
    "answer": "B"
  },
  {
    "question": "ржЬрж╛рждрзАржпрж╝ рж╕ржВржЧрзАржд ржХрзЗ рж▓рж┐ржЦрзЗржЫрзЗржи?",
    "options": {
      "A": "ржХрж╛ржЬрзА ржиржЬрж░рзБрж▓ ржЗрж╕рж▓рж╛ржо",
      "B": "рж╣рж╛рж╕рж╛ржи ржЖржЬрж┐ржЬрзБрж▓ рж╣ржХ",
      "C": "рж░ржмрзАржирзНржжрзНрж░ржирж╛рже ржарж╛ржХрзБрж░",
      "D": "ржЬрж╕рзАржо ржЙржжрзНржжрж┐ржи"
    },
    "answer": "C"
  }
]
